# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# Python config
export PYTHONSTARTUP=~/.pythonrc

# get current branch in git repo
function parse_git_branch() {
	BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
	if [ ! "${BRANCH}" == "" ]
	then
		STAT=`parse_git_dirty`
		echo "git:${BRANCH}${STAT} "
	else
		echo ""
	fi
}

# get current status of git repo
function parse_git_dirty {
	status=`git status 2>&1 | tee`
	dirty=`echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?"`
	untracked=`echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?"`
	ahead=`echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?"`
	newfile=`echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?"`
	renamed=`echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?"`
	deleted=`echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?"`
	bits=''
	if [ "${renamed}" == "0" ] || [ "${ahead}" == "0" ] || [ "${newfile}" == "0" ] || [ "${untracked}" == "0" ] || [ "${deleted}" == "0" ] || [ "${dirty}" == "0" ]; then
		bits="x${bits}"
	fi
	if [ ! "${bits}" == "" ]; then
		echo " ${bits}"
	else
		echo " o"
	fi
}

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1="\n(bash) \[\e[36m\]\u\[\e[m\] \[\033[38;5;7m\]at\[$(tput sgr0)\] \[\e[32m\]\h\[\e[m\] \[\033[38;5;7m\]in\[$(tput sgr0)\] \[$(tput bold)\]\[\e[33m\]\w\[\e[m\] \[\033[38;5;15m\]\`parse_git_branch\`\[$(tput sgr0)\]\[$(tput sgr0)\]\[\033[38;5;7m\][\t]\[$(tput sgr0)\]\[\e[31m\]\\n\[$(tput bold)\]\$\[\e[m\] "
else
    PS1="\n(bash) \u at \h in \w \`parse_git_branch\`\\n\$ "
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\n(bash) \[\e[36m\]\u\[\e[m\] \[\033[38;5;7m\]at\[$(tput sgr0)\] \[\e[32m\]\h\[\e[m\] \[\033[38;5;7m\]in\[$(tput sgr0)\] \[$(tput bold)\]\[\e[33m\]\w\[\e[m\] \[\033[38;5;15m\]\`parse_git_branch\`\[$(tput sgr0)\]\[$(tput sgr0)\]\[\033[38;5;7m\][\t]\[$(tput sgr0)\]\[\e[31m\]\\n\[$(tput bold)\]\$\[\e[m\] "
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias tmux="tmux -2"
alias ta='tmux attach -t'
alias ts='tmux new-session -s'
alias tl='tmux list-sessions'
alias ..g='cd "$(git rev-parse --show-toplevel)"'
alias py="PYTHONSTARTUP=~/.ptpython/ptrc.py ptpython3"
alias perm='stat -c "%a %n"'
alias dog='pygmentize -g -O style=colorful'
alias ll='ls -lh --group-directories-first'
alias l='ls -lah --group-directories-first'
# Pipe in to copy
alias xy="xclip -selection c"
# Paste to STDOUT
alias xp="xclip -selection c -o"


# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Gateway ip
exip(){
    # Gets external IP from opendns.com
    IPN=$(dig +short myip.opendns.com @resolver1.opendns.com)
    CNTRY=$(curl -s ipinfo.io | grep -v ip | grep country | grep -o '[A-Z].')
    echo "=> External IP  $IPN" 
    echo "=> Country      $CNTRY"
}

extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)        tar xjf $1        ;;
            *.tar.gz)         tar xzf $1        ;;
            *.tar.xz)         tar xJf $1        ;;
            *.bz2)            bunzip2 $1        ;;
            *.rar)            unrar x $1        ;;
            *.gz)             gunzip $1         ;;
            *.tar)            tar xf $1         ;;
            *.tbz2)           tar xjf $1        ;;
            *.tgz)            tar xzf $1        ;;
            *.zip)            unzip $1          ;;
            *.Z)              uncompress $1     ;;
            *.7z)             7zr e $1          ;;
            *)                echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

bleach(){
    cleaners="apt.autoclean apt.autoremove bash.history " 
    cleaners+="deepscan.ds_store deepscan.backup deepscan.tmp "
    cleaners+="deepscan.thumbs_db firefox.backup firefox.cache "
    cleaners+="firefox.crash_reports firefox.download_history "
    cleaners+="firefox.url_history firefox.vacuum libreoffice.cache "
    cleaners+="libreoffice.history system.desktop_entry system.cache "
    cleaners+="system.clipboard system.localizations system.recent_documents "
    cleaners+="system.rotated_logs system.trash thumbnails.cache x11.debug_logs "
    cleaners+="thunderbird.cache thunderbird.cookies thunderbird.index thunderbird.passwords "
    cleaners+="thunderbird.vacuum system.tmp chromium.cache chromium.current_session chromium.dom chromium.history"

    sudo bleachbit -c $cleaners
}

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# Cycling completion
bind "TAB:menu-complete"
bind "set show-all-if-ambiguous on"
